name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
      - daniel/deploy

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      # Set up the Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Google Container Registry
      - name: Login to Google Container Registry
        uses: docker/login-action@v3
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      # Set GCP Project ID as environment variable
      - name: Set env variables
        run: echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV

      - name: Verify Environment Variables
        run: |
          # Get the service details and check environment variables
          SERVICE_DETAILS=$(gcloud run services describe vite-frontend --region us-east4 --platform managed --format='json')

          # Extract environment variables
          ENV_VARS=$(echo $SERVICE_DETAILS | jq -r '.spec.template.spec.containers[0].env[] | "\(.name)=\(.value)"')

          # Check for required variables
          if ! echo "$ENV_VARS" | grep -q "VITE_SUPABASE_URL"; then
            echo "Error: VITE_SUPABASE_URL not found in deployed service"
            exit 1
          fi

          if ! echo "$ENV_VARS" | grep -q "VITE_SUPABASE_ANON_KEY"; then
            echo "Error: VITE_SUPABASE_ANON_KEY not found in deployed service"
            exit 1
          fi

          echo "Environment variables verified in deployed service:"
          echo "$ENV_VARS"

      # --- Backend Deployment ---
      - name: Build and Push Backend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: gcr.io/${{ env.GCP_PROJECT_ID }}/fastapi-backend:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Backend Image
        run: |
          docker pull gcr.io/${{ env.GCP_PROJECT_ID }}/fastapi-backend:latest
          if [ $? -ne 0 ]; then
            echo "Failed to pull backend image"
            exit 1
          fi

      - name: Deploy Backend to Cloud Run
        id: deploy-backend
        run: |
          gcloud run deploy fastapi-backend --image gcr.io/${{ env.GCP_PROJECT_ID }}/fastapi-backend:latest --region us-east4 --platform managed --allow-unauthenticated --max-instances=1 --set-env-vars SPOONACULAR_API_KEY=${{ secrets.SPOONACULAR_API_KEY }},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}

      - name: Retrieve Backend Service URL
        id: get_backend_url
        run: |
          SERVICE_URL=$(gcloud run services describe fastapi-backend --region us-east4 --platform managed --format='value(status.url)')
          if [ -z "$SERVICE_URL" ]; then
            echo "Failed to get backend service URL"
            exit 1
          fi
          echo "Backend Service URL: ${SERVICE_URL}"
          echo "service_url=${SERVICE_URL}" >> $GITHUB_OUTPUT

      # --- Frontend Deployment ---
      - name: Debug Environment Variables
        run: |
          echo "Checking environment variables before build..."
          echo "VITE_BACKEND_URL exists: ${{ steps.get_backend_url.outputs.service_url != '' }}"
          echo "VITE_SUPABASE_URL exists: ${{ secrets.VITE_SUPABASE_URL != '' }}"
          echo "VITE_SUPABASE_ANON_KEY exists: ${{ secrets.VITE_SUPABASE_ANON_KEY != '' }}"

      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: gcr.io/${{ env.GCP_PROJECT_ID }}/vite-frontend:latest
          platforms: linux/amd64
          build-args: |
            VITE_BACKEND_URL=${{ steps.get_backend_url.outputs.service_url }}
            VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
            VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Frontend Image
        run: |
          docker pull gcr.io/${{ env.GCP_PROJECT_ID }}/vite-frontend:latest
          if [ $? -ne 0 ]; then
            echo "Failed to pull frontend image"
            exit 1
          fi

      - name: Verify Environment Variables
        run: |
          if [ -z "${{ secrets.VITE_SUPABASE_URL }}" ]; then
            echo "Error: VITE_SUPABASE_URL is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VITE_SUPABASE_ANON_KEY }}" ]; then
            echo "Error: VITE_SUPABASE_ANON_KEY is not set"
            exit 1
          fi
          echo "Environment variables are properly set"

      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy vite-frontend \
            --image gcr.io/${{ env.GCP_PROJECT_ID }}/vite-frontend:latest \
            --region us-east4 \
            --platform managed \
            --allow-unauthenticated \
            --max-instances=1 \
            --service-account="${{ secrets.GCP_SERVICE_ACCOUNT }}" \
            --ingress=all

      - name: Display Frontend URL
        run: |
          FRONTEND_URL=$(gcloud run services describe vite-frontend --region us-east4 --platform managed --format='value(status.url)')
          if [ -z "$FRONTEND_URL" ]; then
            echo "Failed to get frontend service URL"
            exit 1
          fi
          echo "Frontend available at: ${FRONTEND_URL}"

      # Uncomment and configure these steps when you have a custom domain
      # - name: Map Custom Domain to Frontend
      #   run: |
      #     gcloud beta run domain-mappings create \
      #       --service vite-frontend \
      #       --domain your-domain.com \
      #       --region us-east4
